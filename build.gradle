plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id "org.flywaydb.flyway" version "10.9.0"
    id "com.bmuschko.docker-remote-api" version "9.4.0"
//    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.LetMeDoWith'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }


}

// 환경변수 설정
ext {
    awsCliProfile = System.getenv("AWS_CLI_PROFILE")
    dockerImageName = System.getenv("DOCKER_IMAGE_NAME")
    dockerImageTag = System.getenv("DOCKER_IMAGE_TAG")
    ecrRepository = System.getenv("ECR_REPOSITORY")
    awsRegion = System.getenv("AWS_REGION")
    deployPlatform = System.getenv("DEPLOY_PLATFORM")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
    testImplementation 'org.projectlombok:lombok:1.18.22'
    compileOnly 'org.projectlombok:lombok'
    implementation 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    // QueryDSL JPA
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Jwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

    // flyway
    implementation("org.flywaydb:flyway-core")
    implementation("org.flywaydb:flyway-mysql")

    // webClient
    implementation 'org.springframework.boot:spring-boot-starter-webflux:3.2.2'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:3.2.3'

    // spring cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // for resolve error only causes in Apple Silicon Mac.
    implementation("io.netty:netty-resolver-dns-native-macos:4.1.75.Final:osx-aarch_64")

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    annotationProcessor 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'


}


import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

task buildDockerImage(type: DockerBuildImage) {
    group = "docker"
    inputDir = file(".")
    images.add(dockerImageName + ":" + dockerImageTag)
    platform = deployPlatform
}

task tagDockerImage(type: DockerTagImage) {
    group = "docker"
    dependsOn buildDockerImage
    imageId = dockerImageName + ":" + dockerImageTag
    repository = ecrRepository
    tag = dockerImageTag
}

// AWS ECR 로그인 작업
task ecrLogin {
    group = "docker"
    // AWS-CLI Configure letmedowith profile에 IAM 계정 세팅 필요
    doLast {
        def loginCommand = "aws ecr get-login-password --profile " + awsCliProfile + " --region " + awsRegion + " | docker login --username AWS --password-stdin " + ecrRepository
        exec {
            commandLine 'sh', '-c', loginCommand
        }
    }
}

task buildAndPushDockerImage {
    group = "docker"
    dependsOn ecrLogin, tagDockerImage
    doLast {
        def pushCommand = "docker push " + ecrRepository + ":" + dockerImageTag
        exec {
            commandLine 'sh', '-c', pushCommand
        }
    }
}


test {
    useJUnitPlatform()

    // 모든 테스트 이벤트 로깅
    testLogging {
        events "passed", "skipped", "failed" // 성공, 스킵, 실패한 테스트 이벤트 로깅

        // 예외 메시지 출력
        showExceptions true // 예외 메시지 출력 활성화
        showCauses true // 예외 원인 출력 활성화
        showStackTraces true // 스택 트레이스 출력 활성화

        // 콘솔에 즉시 테스트 결과 표시
        showStandardStreams = true // 표준 출력 및 오류 스트림 표시
    }
}

tasks.test {

}